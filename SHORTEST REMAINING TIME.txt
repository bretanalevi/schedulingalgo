#include<iostream>
using namespace std;
class sched{
public:
    int n,i,bt[10],at[10],tat[10],wt[10],rt[10],finish[10],twt,ttat,total;
    void readData();
    void computeSRT();
    void Init();
    void dispTime();
    int getNextProcess(int);
    void computeRR();
};
 
void sched::readData()
{
    cout<<"Enter no. of processes\n";
    cin>>n;
    cout<<"Enter the burst times in order :\n";
    for(int i=0;i<n;i++)
    cin>>bt[i];
    cout<<"Enter the arrival times in order:\n";
    for(i=0;i<n;i++)
    cin>>at[i];
}
 
void sched::Init(){
    total=0;#include<iostream>
using namespace std;
class sched{
public:
    int n4,i4,bt4[10],at4[10],tat4[10],wt4[10],rt4[10],finish4[10],twt4,ttat4,total4;
    void readData();
    void computeSRT();
    void Init();
    void dispTime();
    int getNextProcess(int);
    void computeRR();
};
 
void sched::readData()
{
	n4=4;
	cout << "SHORTEST REMAINING TIME ALGORITHM " <<endl<<endl;
    cout<<"Enter 4 Process\n";
    
    for(int i4=0;i4<n4;i4++)
	{
	cout << "\nProcess " << i4+1;
	cout<<"\nArrival Time: ";
	cin>>at4[i4];
	cout<<"Burst Time: ";
    cin>>bt4[i4];

	}
    cout << endl << endl;
}
 
void sched::Init(){
    total4=0;
    twt4=0;
    ttat4=0;
    for(int i4=0; i4<n4; i4++){
        rt4[i4]=bt4[i4];
        finish4[i4]=0;
        wt4[i4]=0;
        tat4[i4]=0;
        total4+=bt4[i4];
        }
}
 
void sched::computeSRT()
{
    readData();
    Init();
    int time4,next4=0,old4,i4;

    for(time4=0;time4<total4;time4++)
    {
        
		old4=next4;
        next4=getNextProcess(time4);

        if(old4!=next4 || time4==0)
		{
			 cout<<"("<<time4<<")|==P"<<next4+1<<"==|";
		}
		
        rt4[next4]=rt4[next4]-1;
        if(rt4[next4]==0) finish4[next4]=1;
		
        for(i4=0;i4<n4;i4++)
		{
            if(i4!=next4 && finish4[i4]==0 && at4[i4]<=time4)
			{
				
				wt4[i4]++;

			}
			
		}
    }
    cout<<"("<<total4<<")"<<endl;
	

 
    for(i4=0;i4<n4;i4++)
        if(!finish4[i4]) {cout<<"Scheduling failed, cannot continue\n"; return;}
 
    dispTime();
 
}
 
void sched::dispTime()
{
	cout << endl;
	cout << "\nProcess\t    Arrival Time\tBurst Time\tWaiting Time\tTurnaround Time"<<endl;
    for(int i4=0;i4<n4;i4++)
    {
 
        twt4+=wt4[i4];
        tat4[i4]=wt4[i4]+bt4[i4];
        ttat4+=tat4[i4];
        cout << "\nP[" << i4+1 << "]\t\t  " << at4[i4] << "\t\t    " << bt4[i4] << "\t\t    " << wt4[i4] << "\t\t\t" << tat4[i4];
 
    }
	cout << endl<<endl;
    cout<<"Average Waiting time = "<<(double)twt4/n4<<endl;
	cout<<"Average Turnaround time = "<<(double)ttat4/n4<<endl;

}
 
int sched::getNextProcess(int time4){
 
        int i4,low4;
        for(i4=0;i4<n4;i4++)
            if(finish4[i4]==0){low4=i4; break; }
        for(i4=0;i4<n4;i4++)
            if(finish4[i4]!=1)
                if(rt4[i4]<rt4[low4] && at4[i4]<=time4)
                        low4=i4;
        return low4;
 
}
 

int main()
{
    sched s;
	s.computeSRT();

	system("pause >0");
}